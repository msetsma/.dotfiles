# echo email to clipboard 
cmd - e : echo -n "msetsma@steelcase.com" | pbcopy; osascript -e 'tell application "System Events" to keystroke "v" using command down'

# open apps
cmd + alt - w : open -a "WezTerm" || open -na "WezTerm"
cmd + alt - t : open -a "Microsoft Teams" || open -na "Microsoft Teams"
cmd + alt - b : open -a "Chrome" || open -na "Chrome"
cmd + alt - o : open -a "Microsoft Outlook" || open -na "Microsoft Outlook"
cmd + alt - a : open -a "Aerospace" || open -na "Aerospace"

#############
# Aerospace #
#############

# Move focus between windows (using `cmd + shift`)
cmd + shift - h : aerospace window --focus left
cmd + shift - l : aerospace window --focus right
cmd + shift - k : aerospace window --focus up
cmd + shift - j : aerospace window --focus down

# Move active window
cmd + shift + alt - h : aerospace window --move left
cmd + shift + alt - l : aerospace window --move right
cmd + shift + alt - k : aerospace window --move up
cmd + shift + alt - j : aerospace window --move down

# Resize active window
cmd + ctrl - h : aerospace window --resize decrease width
cmd + ctrl - l : aerospace window --resize increase width
cmd + ctrl - k : aerospace window --resize increase height
cmd + ctrl - j : aerospace window --resize decrease height

# Move window to another space
cmd + ctrl - 1 : aerospace window --space 1
cmd + ctrl - 2 : aerospace window --space 2
cmd + ctrl - 3 : aerospace window --space 3
cmd + ctrl - 4 : aerospace window --space 4
cmd + ctrl - left : aerospace window --space prev
cmd + ctrl - right : aerospace window --space next

# Switch focus between spaces
cmd + alt - n : aerospace space --focus next
cmd + alt - p : aerospace space --focus prev

# Toggle floating mode for active window
cmd + shift - f : aerospace window --float

# Close and kill windows
cmd + shift - q : aerospace window --close
cmd + shift + alt - q : aerospace window --kill

# Restart AeroSpace
cmd + shift + ctrl - r : aerospace --restart


# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst= * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.
